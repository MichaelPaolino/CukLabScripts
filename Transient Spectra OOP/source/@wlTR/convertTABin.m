function obj = convertTABin(obj,filePath)
% CONVERTTABIN converts a binary file, generated by the legacy TR
% acquisition program, to a wlTR object. This method calls readTAbinFile
% and extracts data from the expSet and rawData outputs.
%
% obj = obj.convertTABin(filePath)
%   Convert legacy TR acquisition binary file into wlTR object data
%
% See Also: READTABINFILE

    % nm: [nPixels, nGpos]
    % exp.labelValues: [overall repeats, repeats per delay, delay, value index]
    % value index: [acq start (ms timestamp), acq stop (ms timestamp), actual delay readout (ps), x (mm), y (mm), x (mm)] 
    % rawdata: [nRepeats, delay repeats, nGpos, nDelay, nPixels]
    [~, wl, ~, expSet, ~, rawData] = readTAbinFile(filePath);
    
    % build object data:
    % Once data is loaded into myData, copy contents into object and use repmat/permute to reassign dims
    obj.spectra.data = permute(mean(rawData,2,'omitnan'),[5,4,1,3,2]); %mOD [pixels, delays, rpts, grating pos, schemes]
    obj.spectra_std.data = NaN(size(obj.spectra.data)); %TA bin file does not contain std info
    obj.delays.data = repmat(permute(mean(expSet.labelValues(:,:,:,3),2,'omitnan'),[3,1,2,4]),1,1,size(obj.spectra.data,4)); %ps [delays, repeats, grating pos]
    obj.wavelengths.data = wl; %nm [pixels, grating pos]
    obj.gPos = expSet.gratings(:); %nm [nGPos,1]
    obj.schemes = {'transient reflectance'};
    
    obj.t0.data = 0;
    
    % Update size struct
    obj.sizes = struct('nRpts', size(obj.spectra.data,3), ...  %struct with fields type double defining the size of spectra dimensions
                       'nGPos', size(obj.spectra.data,4), ...
                       'nSchemes', 1, ...
                       'nDelays', size(obj.spectra.data,2), ...
                       'nPixels', size(obj.spectra.data,1));
    
    % Update object name and shortName
    [~,fileName] = fileparts(filePath);
    obj.name = filePath;
    obj.shortName = fileName;
    obj.description = char(expSet.description);
end